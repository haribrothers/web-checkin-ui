"use strict";
var type_1 = require("../../core/utils/type");
var category_common_1 = require("../common/category.common");
exports.ActionTypes = {
    INIT: type_1.type(category_common_1.CATEGORY + " Init"),
    INITIALIZED: type_1.type(category_common_1.CATEGORY + " Initialized"),
    INIT_FAILED: type_1.type(category_common_1.CATEGORY + " Init Failed"),
    ADD: type_1.type(category_common_1.CATEGORY + " Add"),
    NAME_ADDED: type_1.type(category_common_1.CATEGORY + " Name Added")
};
var InitAction = (function () {
    function InitAction() {
        this.type = exports.ActionTypes.INIT;
        this.payload = null;
    }
    return InitAction;
}());
exports.InitAction = InitAction;
var InitializedAction = (function () {
    function InitializedAction(payload) {
        this.payload = payload;
        this.type = exports.ActionTypes.INITIALIZED;
    }
    return InitializedAction;
}());
exports.InitializedAction = InitializedAction;
var InitFailedAction = (function () {
    function InitFailedAction() {
        this.type = exports.ActionTypes.INIT_FAILED;
        this.payload = null;
    }
    return InitFailedAction;
}());
exports.InitFailedAction = InitFailedAction;
var AddAction = (function () {
    function AddAction(payload) {
        this.payload = payload;
        this.type = exports.ActionTypes.ADD;
    }
    return AddAction;
}());
exports.AddAction = AddAction;
var NameAddedAction = (function () {
    function NameAddedAction(payload) {
        this.payload = payload;
        this.type = exports.ActionTypes.NAME_ADDED;
    }
    return NameAddedAction;
}());
exports.NameAddedAction = NameAddedAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zaGFyZWQvY29wYS13Y2kvYWN0aW9ucy9uYW1lLWxpc3QuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSw4Q0FBNkM7QUFDN0MsNkRBQXFEO0FBa0J4QyxRQUFBLFdBQVcsR0FBcUI7SUFDM0MsSUFBSSxFQUFTLFdBQUksQ0FBSSwwQkFBUSxVQUFPLENBQUM7SUFDckMsV0FBVyxFQUFFLFdBQUksQ0FBSSwwQkFBUSxpQkFBYyxDQUFDO0lBQzVDLFdBQVcsRUFBRSxXQUFJLENBQUksMEJBQVEsaUJBQWMsQ0FBQztJQUM1QyxHQUFHLEVBQVUsV0FBSSxDQUFJLDBCQUFRLFNBQU0sQ0FBQztJQUNwQyxVQUFVLEVBQUcsV0FBSSxDQUFJLDBCQUFRLGdCQUFhLENBQUM7Q0FDNUMsQ0FBQztBQVNGO0lBQUE7UUFDRSxTQUFJLEdBQUcsbUJBQVcsQ0FBQyxJQUFJLENBQUM7UUFDeEIsWUFBTyxHQUFXLElBQUksQ0FBQztJQUN6QixDQUFDO0lBQUQsaUJBQUM7QUFBRCxDQUhBLEFBR0MsSUFBQTtBQUhZLGdDQUFVO0FBS3ZCO0lBR0UsMkJBQW1CLE9BQXNCO1FBQXRCLFlBQU8sR0FBUCxPQUFPLENBQWU7UUFGekMsU0FBSSxHQUFHLG1CQUFXLENBQUMsV0FBVyxDQUFDO0lBRWMsQ0FBQztJQUNoRCx3QkFBQztBQUFELENBSkEsQUFJQyxJQUFBO0FBSlksOENBQWlCO0FBTTlCO0lBQUE7UUFDRSxTQUFJLEdBQUcsbUJBQVcsQ0FBQyxXQUFXLENBQUM7UUFDL0IsWUFBTyxHQUFXLElBQUksQ0FBQztJQUN6QixDQUFDO0lBQUQsdUJBQUM7QUFBRCxDQUhBLEFBR0MsSUFBQTtBQUhZLDRDQUFnQjtBQUs3QjtJQUdFLG1CQUFtQixPQUFlO1FBQWYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUZsQyxTQUFJLEdBQUcsbUJBQVcsQ0FBQyxHQUFHLENBQUM7SUFFZSxDQUFDO0lBQ3pDLGdCQUFDO0FBQUQsQ0FKQSxBQUlDLElBQUE7QUFKWSw4QkFBUztBQU10QjtJQUdFLHlCQUFtQixPQUFlO1FBQWYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUZsQyxTQUFJLEdBQUcsbUJBQVcsQ0FBQyxVQUFVLENBQUM7SUFFUSxDQUFDO0lBQ3pDLHNCQUFDO0FBQUQsQ0FKQSxBQUlDLElBQUE7QUFKWSwwQ0FBZSIsImZpbGUiOiJhcHAvc2hhcmVkL2NvcGEtd2NpL2FjdGlvbnMvbmFtZS1saXN0LmFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbiB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IHR5cGUgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzL3R5cGUnO1xuaW1wb3J0IHsgQ0FURUdPUlkgfSBmcm9tICcuLi9jb21tb24vY2F0ZWdvcnkuY29tbW9uJztcblxuLyoqXG4gKiBGb3IgZWFjaCBhY3Rpb24gdHlwZSBpbiBhbiBhY3Rpb24gZ3JvdXAsIG1ha2UgYSBzaW1wbGVcbiAqIGVudW0gb2JqZWN0IGZvciBhbGwgb2YgdGhpcyBncm91cCdzIGFjdGlvbiB0eXBlcy5cbiAqXG4gKiBUaGUgJ3R5cGUnIHV0aWxpdHkgZnVuY3Rpb24gY29lcmNlcyBzdHJpbmdzIGludG8gc3RyaW5nXG4gKiBsaXRlcmFsIHR5cGVzIGFuZCBydW5zIGEgc2ltcGxlIGNoZWNrIHRvIGd1YXJhbnRlZSBhbGxcbiAqIGFjdGlvbiB0eXBlcyBpbiB0aGUgYXBwbGljYXRpb24gYXJlIHVuaXF1ZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJTmFtZUxpc3RBY3Rpb25zIHtcbiAgSU5JVDogc3RyaW5nO1xuICBJTklUSUFMSVpFRDogc3RyaW5nO1xuICBJTklUX0ZBSUxFRDogc3RyaW5nO1xuICBBREQ6IHN0cmluZztcbiAgTkFNRV9BRERFRDogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgQWN0aW9uVHlwZXM6IElOYW1lTGlzdEFjdGlvbnMgPSB7XG4gIElOSVQ6ICAgICAgICB0eXBlKGAke0NBVEVHT1JZfSBJbml0YCksXG4gIElOSVRJQUxJWkVEOiB0eXBlKGAke0NBVEVHT1JZfSBJbml0aWFsaXplZGApLFxuICBJTklUX0ZBSUxFRDogdHlwZShgJHtDQVRFR09SWX0gSW5pdCBGYWlsZWRgKSxcbiAgQUREOiAgICAgICAgIHR5cGUoYCR7Q0FURUdPUll9IEFkZGApLFxuICBOQU1FX0FEREVEOiAgdHlwZShgJHtDQVRFR09SWX0gTmFtZSBBZGRlZGApXG59O1xuXG4vKipcbiAqIEV2ZXJ5IGFjdGlvbiBpcyBjb21wcmlzZWQgb2YgYXQgbGVhc3QgYSB0eXBlIGFuZCBhbiBvcHRpb25hbFxuICogcGF5bG9hZC4gRXhwcmVzc2luZyBhY3Rpb25zIGFzIGNsYXNzZXMgZW5hYmxlcyBwb3dlcmZ1bFxuICogdHlwZSBjaGVja2luZyBpbiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBTZWUgRGlzY3JpbWluYXRlZCBVbmlvbnM6IGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy9kb2NzL2hhbmRib29rL2FkdmFuY2VkLXR5cGVzLmh0bWwjZGlzY3JpbWluYXRlZC11bmlvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIEluaXRBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb24ge1xuICB0eXBlID0gQWN0aW9uVHlwZXMuSU5JVDtcbiAgcGF5bG9hZDogc3RyaW5nID0gbnVsbDtcbn1cblxuZXhwb3J0IGNsYXNzIEluaXRpYWxpemVkQWN0aW9uIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgdHlwZSA9IEFjdGlvblR5cGVzLklOSVRJQUxJWkVEO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBBcnJheTxzdHJpbmc+KSB7IH1cbn1cblxuZXhwb3J0IGNsYXNzIEluaXRGYWlsZWRBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb24ge1xuICB0eXBlID0gQWN0aW9uVHlwZXMuSU5JVF9GQUlMRUQ7XG4gIHBheWxvYWQ6IHN0cmluZyA9IG51bGw7XG59XG5cbmV4cG9ydCBjbGFzcyBBZGRBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb24ge1xuICB0eXBlID0gQWN0aW9uVHlwZXMuQUREO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBzdHJpbmcpIHsgfVxufVxuXG5leHBvcnQgY2xhc3MgTmFtZUFkZGVkQWN0aW9uIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgdHlwZSA9IEFjdGlvblR5cGVzLk5BTUVfQURERUQ7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IHN0cmluZykgeyB9XG59XG5cbi8qKlxuICogRXhwb3J0IGEgdHlwZSBhbGlhcyBvZiBhbGwgYWN0aW9ucyBpbiB0aGlzIGFjdGlvbiBncm91cFxuICogc28gdGhhdCByZWR1Y2VycyBjYW4gZWFzaWx5IGNvbXBvc2UgYWN0aW9uIHR5cGVzXG4gKi9cbmV4cG9ydCB0eXBlIEFjdGlvbnNcbiAgPSBJbml0QWN0aW9uXG4gIHwgSW5pdGlhbGl6ZWRBY3Rpb25cbiAgfCBJbml0RmFpbGVkQWN0aW9uXG4gIHwgQWRkQWN0aW9uXG4gIHwgTmFtZUFkZGVkQWN0aW9uO1xuIl19
