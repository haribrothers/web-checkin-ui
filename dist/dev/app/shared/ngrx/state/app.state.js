"use strict";
require("@ngrx/core/add/operator/select");
var compose_1 = require("@ngrx/core/compose");
var ngrx_store_freeze_1 = require("ngrx-store-freeze");
var store_1 = require("@ngrx/store");
var fromMultilingual = require("../../i18n/index");
var fromSample = require("../../copa-wci/index");
;
var reducers = {
    i18n: fromMultilingual.reducer,
    sample: fromSample.reducer
};
var developmentReducer = compose_1.compose(ngrx_store_freeze_1.storeFreeze, store_1.combineReducers)(reducers);
var productionReducer = store_1.combineReducers(reducers);
function AppReducer(state, action) {
    if (String('dev') === 'dev') {
        return developmentReducer(state, action);
    }
    else {
        return productionReducer(state, action);
    }
}
exports.AppReducer = AppReducer;
function getMultilingualState(state$) {
    return state$.select(function (s) { return s.i18n; });
}
exports.getMultilingualState = getMultilingualState;
function getNameListState(state$) {
    return state$.select(function (s) { return s.sample; });
}
exports.getNameListState = getNameListState;
exports.getLang = compose_1.compose(fromMultilingual.getLang, getMultilingualState);
exports.getNames = compose_1.compose(fromSample.getNames, getNameListState);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zaGFyZWQvbmdyeC9zdGF0ZS9hcHAuc3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUlBLDBDQUF3QztBQVV4Qyw4Q0FBNkM7QUFPN0MsdURBQWdEO0FBVWhELHFDQUE4QztBQVE5QyxtREFBcUQ7QUFFckQsaURBQW1EO0FBVWxELENBQUM7QUFTRixJQUFNLFFBQVEsR0FBRztJQUNmLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxPQUFPO0lBQzlCLE1BQU0sRUFBRSxVQUFVLENBQUMsT0FBTztDQUMzQixDQUFDO0FBRUYsSUFBTSxrQkFBa0IsR0FBNkIsaUJBQU8sQ0FBQywrQkFBVyxFQUFFLHVCQUFlLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNyRyxJQUFNLGlCQUFpQixHQUE2Qix1QkFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRTlFLG9CQUEyQixLQUFVLEVBQUUsTUFBVztJQUNoRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxQyxDQUFDO0FBQ0gsQ0FBQztBQU5ELGdDQU1DO0FBRUQsOEJBQXFDLE1BQTZCO0lBQ2hFLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksRUFBTixDQUFNLENBQUMsQ0FBQztBQUNwQyxDQUFDO0FBRkQsb0RBRUM7QUFDRCwwQkFBaUMsTUFBNkI7SUFDNUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsTUFBTSxFQUFSLENBQVEsQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFGRCw0Q0FFQztBQUVZLFFBQUEsT0FBTyxHQUFRLGlCQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLG9CQUFvQixDQUFDLENBQUM7QUFDdkUsUUFBQSxRQUFRLEdBQVEsaUJBQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLGdCQUFnQixDQUFDLENBQUMiLCJmaWxlIjoiYXBwL3NoYXJlZC9uZ3J4L3N0YXRlL2FwcC5zdGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGxpYnNcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XHJcbi8vIGltcG9ydCB7IGNvbWJpbmVMYXRlc3QgfSBmcm9tICdyeGpzL29ic2VydmFibGUvY29tYmluZUxhdGVzdCc7XHJcbmltcG9ydCB7IEFjdGlvblJlZHVjZXIgfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCAnQG5ncngvY29yZS9hZGQvb3BlcmF0b3Ivc2VsZWN0JztcclxuXHJcbi8qKlxyXG4gKiBUaGUgY29tcG9zZSBmdW5jdGlvbiBpcyBvbmUgb2Ygb3VyIG1vc3QgaGFuZHkgdG9vbHMuIEluIGJhc2ljIHRlcm1zLCB5b3UgZ2l2ZVxyXG4gKiBpdCBhbnkgbnVtYmVyIG9mIGZ1bmN0aW9ucyBhbmQgaXQgcmV0dXJucyBhIGZ1bmN0aW9uLiBUaGlzIG5ldyBmdW5jdGlvblxyXG4gKiB0YWtlcyBhIHZhbHVlIGFuZCBjaGFpbnMgaXQgdGhyb3VnaCBldmVyeSBjb21wb3NlZCBmdW5jdGlvbiwgcmV0dXJuaW5nXHJcbiAqIHRoZSBvdXRwdXQuXHJcbiAqXHJcbiAqIE1vcmU6IGh0dHBzOi8vZHJib29sZWFuLmdpdGJvb2tzLmlvL21vc3RseS1hZGVxdWF0ZS1ndWlkZS9jb250ZW50L2NoNS5odG1sXHJcbiAqL1xyXG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSAnQG5ncngvY29yZS9jb21wb3NlJztcclxuXHJcbi8qKlxyXG4gKiBzdG9yZUZyZWV6ZSBwcmV2ZW50cyBzdGF0ZSBmcm9tIGJlaW5nIG11dGF0ZWQuIFdoZW4gbXV0YXRpb24gb2NjdXJzLCBhblxyXG4gKiBleGNlcHRpb24gd2lsbCBiZSB0aHJvd24uIFRoaXMgaXMgdXNlZnVsIGR1cmluZyBkZXZlbG9wbWVudCBtb2RlIHRvXHJcbiAqIGVuc3VyZSB0aGF0IG5vbmUgb2YgdGhlIHJlZHVjZXJzIGFjY2lkZW50YWxseSBtdXRhdGVzIHRoZSBzdGF0ZS5cclxuICovXHJcbmltcG9ydCB7IHN0b3JlRnJlZXplIH0gZnJvbSAnbmdyeC1zdG9yZS1mcmVlemUnO1xyXG5cclxuLyoqXHJcbiAqIGNvbWJpbmVSZWR1Y2VycyBpcyBhbm90aGVyIHVzZWZ1bCBtZXRhcmVkdWNlciB0aGF0IHRha2VzIGEgbWFwIG9mIHJlZHVjZXJcclxuICogZnVuY3Rpb25zIGFuZCBjcmVhdGVzIGEgbmV3IHJlZHVjZXIgdGhhdCBzdG9yZXMgdGhlIGdhdGhlcnMgdGhlIHZhbHVlc1xyXG4gKiBvZiBlYWNoIHJlZHVjZXIgYW5kIHN0b3JlcyB0aGVtIHVzaW5nIHRoZSByZWR1Y2VyJ3Mga2V5LiBUaGluayBvZiBpdFxyXG4gKiBhbG1vc3QgbGlrZSBhIGRhdGFiYXNlLCB3aGVyZSBldmVyeSByZWR1Y2VyIGlzIGEgdGFibGUgaW4gdGhlIGRiLlxyXG4gKlxyXG4gKiBNb3JlOiBodHRwczovL2VnZ2hlYWQuaW8vbGVzc29ucy9qYXZhc2NyaXB0LXJlZHV4LWltcGxlbWVudGluZy1jb21iaW5lcmVkdWNlcnMtZnJvbS1zY3JhdGNoXHJcbiAqL1xyXG5pbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcblxyXG4vKipcclxuICogRXZlcnkgcmVkdWNlciBtb2R1bGUncyBkZWZhdWx0IGV4cG9ydCBpcyB0aGUgcmVkdWNlciBmdW5jdGlvbiBpdHNlbGYuIEluXHJcbiAqIGFkZGl0aW9uLCBlYWNoIG1vZHVsZSBzaG91bGQgZXhwb3J0IGEgdHlwZSBvciBpbnRlcmZhY2UgdGhhdCBkZXNjcmliZXNcclxuICogdGhlIHN0YXRlIG9mIHRoZSByZWR1Y2VyIHBsdXMgYW55IHNlbGVjdG9yIGZ1bmN0aW9ucy4gVGhlIGAqIGFzYFxyXG4gKiBub3RhdGlvbiBwYWNrYWdlcyB1cCBhbGwgb2YgdGhlIGV4cG9ydHMgaW50byBhIHNpbmdsZSBvYmplY3QuXHJcbiAqL1xyXG5pbXBvcnQgKiBhcyBmcm9tTXVsdGlsaW5ndWFsIGZyb20gJy4uLy4uL2kxOG4vaW5kZXgnO1xyXG5pbXBvcnQgeyBJTXVsdGlsaW5ndWFsU3RhdGUgfSBmcm9tICcuLi8uLi9pMThuL2luZGV4JztcclxuaW1wb3J0ICogYXMgZnJvbVNhbXBsZSBmcm9tICcuLi8uLi9jb3BhLXdjaS9pbmRleCc7XHJcbmltcG9ydCB7IElTYW1wbGVTdGF0ZSB9IGZyb20gJy4uLy4uL2NvcGEtd2NpL2luZGV4JztcclxuXHJcbi8qKlxyXG4gKiBBcyBtZW50aW9uZWQsIHdlIHRyZWF0IGVhY2ggcmVkdWNlciBsaWtlIGEgdGFibGUgaW4gYSBkYXRhYmFzZS4gVGhpcyBtZWFuc1xyXG4gKiBvdXIgdG9wIGxldmVsIHN0YXRlIGludGVyZmFjZSBpcyBqdXN0IGEgbWFwIG9mIGtleXMgdG8gaW5uZXIgc3RhdGUgdHlwZXMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElBcHBTdGF0ZSB7XHJcbiAgaTE4bjogZnJvbU11bHRpbGluZ3VhbC5JTXVsdGlsaW5ndWFsU3RhdGU7XHJcbiAgc2FtcGxlOiBmcm9tU2FtcGxlLklTYW1wbGVTdGF0ZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBCZWNhdXNlIG1ldGFyZWR1Y2VycyB0YWtlIGEgcmVkdWNlciBmdW5jdGlvbiBhbmQgcmV0dXJuIGEgbmV3IHJlZHVjZXIsXHJcbiAqIHdlIGNhbiB1c2Ugb3VyIGNvbXBvc2UgaGVscGVyIHRvIGNoYWluIHRoZW0gdG9nZXRoZXIuIEhlcmUgd2UgYXJlXHJcbiAqIHVzaW5nIGNvbWJpbmVSZWR1Y2VycyB0byBtYWtlIG91ciB0b3AgbGV2ZWwgcmVkdWNlciwgYW5kIHRoZW5cclxuICogd3JhcHBpbmcgdGhhdCBpbiBzdG9yZUxvZ2dlci4gUmVtZW1iZXIgdGhhdCBjb21wb3NlIGFwcGxpZXNcclxuICogdGhlIHJlc3VsdCBmcm9tIHJpZ2h0IHRvIGxlZnQuXHJcbiAqL1xyXG5jb25zdCByZWR1Y2VycyA9IHtcclxuICBpMThuOiBmcm9tTXVsdGlsaW5ndWFsLnJlZHVjZXIsXHJcbiAgc2FtcGxlOiBmcm9tU2FtcGxlLnJlZHVjZXJcclxufTtcclxuXHJcbmNvbnN0IGRldmVsb3BtZW50UmVkdWNlcjogQWN0aW9uUmVkdWNlcjxJQXBwU3RhdGU+ID0gY29tcG9zZShzdG9yZUZyZWV6ZSwgY29tYmluZVJlZHVjZXJzKShyZWR1Y2Vycyk7XHJcbmNvbnN0IHByb2R1Y3Rpb25SZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPElBcHBTdGF0ZT4gPSBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEFwcFJlZHVjZXIoc3RhdGU6IGFueSwgYWN0aW9uOiBhbnkpIHtcclxuICBpZiAoU3RyaW5nKCc8JT0gQlVJTERfVFlQRSAlPicpID09PSAnZGV2Jykge1xyXG4gICAgcmV0dXJuIGRldmVsb3BtZW50UmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHByb2R1Y3Rpb25SZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE11bHRpbGluZ3VhbFN0YXRlKHN0YXRlJDogT2JzZXJ2YWJsZTxJQXBwU3RhdGU+KTogT2JzZXJ2YWJsZTxJTXVsdGlsaW5ndWFsU3RhdGU+IHtcclxuICByZXR1cm4gc3RhdGUkLnNlbGVjdChzID0+IHMuaTE4bik7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE5hbWVMaXN0U3RhdGUoc3RhdGUkOiBPYnNlcnZhYmxlPElBcHBTdGF0ZT4pOiBPYnNlcnZhYmxlPElTYW1wbGVTdGF0ZT4ge1xyXG4gIHJldHVybiBzdGF0ZSQuc2VsZWN0KHMgPT4gcy5zYW1wbGUpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0TGFuZzogYW55ID0gY29tcG9zZShmcm9tTXVsdGlsaW5ndWFsLmdldExhbmcsIGdldE11bHRpbGluZ3VhbFN0YXRlKTtcclxuZXhwb3J0IGNvbnN0IGdldE5hbWVzOiBhbnkgPSBjb21wb3NlKGZyb21TYW1wbGUuZ2V0TmFtZXMsIGdldE5hbWVMaXN0U3RhdGUpO1xyXG4iXX0=
