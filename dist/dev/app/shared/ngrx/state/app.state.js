"use strict";
require("@ngrx/core/add/operator/select");
var compose_1 = require("@ngrx/core/compose");
var ngrx_store_freeze_1 = require("ngrx-store-freeze");
var store_1 = require("@ngrx/store");
var fromMultilingual = require("../../i18n/index");
var fromSample = require("../../copa-wci/index");
;
var reducers = {
    i18n: fromMultilingual.reducer,
    sample: fromSample.reducer
};
var developmentReducer = compose_1.compose(ngrx_store_freeze_1.storeFreeze, store_1.combineReducers)(reducers);
var productionReducer = store_1.combineReducers(reducers);
function AppReducer(state, action) {
    if (String('dev') === 'dev') {
        return developmentReducer(state, action);
    }
    else {
        return productionReducer(state, action);
    }
}
exports.AppReducer = AppReducer;
function getMultilingualState(state$) {
    return state$.select(function (s) { return s.i18n; });
}
exports.getMultilingualState = getMultilingualState;
function getNameListState(state$) {
    return state$.select(function (s) { return s.sample; });
}
exports.getNameListState = getNameListState;
exports.getLang = compose_1.compose(fromMultilingual.getLang, getMultilingualState);
exports.getNames = compose_1.compose(fromSample.getNames, getNameListState);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zaGFyZWQvbmdyeC9zdGF0ZS9hcHAuc3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUlBLDBDQUF3QztBQVV4Qyw4Q0FBNkM7QUFPN0MsdURBQWdEO0FBVWhELHFDQUE4QztBQVE5QyxtREFBcUQ7QUFFckQsaURBQW1EO0FBVWxELENBQUM7QUFTRixJQUFNLFFBQVEsR0FBRztJQUNmLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxPQUFPO0lBQzlCLE1BQU0sRUFBRSxVQUFVLENBQUMsT0FBTztDQUMzQixDQUFDO0FBRUYsSUFBTSxrQkFBa0IsR0FBNkIsaUJBQU8sQ0FBQywrQkFBVyxFQUFFLHVCQUFlLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNyRyxJQUFNLGlCQUFpQixHQUE2Qix1QkFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRTlFLG9CQUEyQixLQUFVLEVBQUUsTUFBVztJQUNoRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxQyxDQUFDO0FBQ0gsQ0FBQztBQU5ELGdDQU1DO0FBRUQsOEJBQXFDLE1BQTZCO0lBQ2hFLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksRUFBTixDQUFNLENBQUMsQ0FBQztBQUNwQyxDQUFDO0FBRkQsb0RBRUM7QUFDRCwwQkFBaUMsTUFBNkI7SUFDNUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsTUFBTSxFQUFSLENBQVEsQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFGRCw0Q0FFQztBQUVZLFFBQUEsT0FBTyxHQUFRLGlCQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLG9CQUFvQixDQUFDLENBQUM7QUFDdkUsUUFBQSxRQUFRLEdBQVEsaUJBQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLGdCQUFnQixDQUFDLENBQUMiLCJmaWxlIjoiYXBwL3NoYXJlZC9uZ3J4L3N0YXRlL2FwcC5zdGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGxpYnNcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuLy8gaW1wb3J0IHsgY29tYmluZUxhdGVzdCB9IGZyb20gJ3J4anMvb2JzZXJ2YWJsZS9jb21iaW5lTGF0ZXN0JztcbmltcG9ydCB7IEFjdGlvblJlZHVjZXIgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgJ0BuZ3J4L2NvcmUvYWRkL29wZXJhdG9yL3NlbGVjdCc7XG5cbi8qKlxuICogVGhlIGNvbXBvc2UgZnVuY3Rpb24gaXMgb25lIG9mIG91ciBtb3N0IGhhbmR5IHRvb2xzLiBJbiBiYXNpYyB0ZXJtcywgeW91IGdpdmVcbiAqIGl0IGFueSBudW1iZXIgb2YgZnVuY3Rpb25zIGFuZCBpdCByZXR1cm5zIGEgZnVuY3Rpb24uIFRoaXMgbmV3IGZ1bmN0aW9uXG4gKiB0YWtlcyBhIHZhbHVlIGFuZCBjaGFpbnMgaXQgdGhyb3VnaCBldmVyeSBjb21wb3NlZCBmdW5jdGlvbiwgcmV0dXJuaW5nXG4gKiB0aGUgb3V0cHV0LlxuICpcbiAqIE1vcmU6IGh0dHBzOi8vZHJib29sZWFuLmdpdGJvb2tzLmlvL21vc3RseS1hZGVxdWF0ZS1ndWlkZS9jb250ZW50L2NoNS5odG1sXG4gKi9cbmltcG9ydCB7IGNvbXBvc2UgfSBmcm9tICdAbmdyeC9jb3JlL2NvbXBvc2UnO1xuXG4vKipcbiAqIHN0b3JlRnJlZXplIHByZXZlbnRzIHN0YXRlIGZyb20gYmVpbmcgbXV0YXRlZC4gV2hlbiBtdXRhdGlvbiBvY2N1cnMsIGFuXG4gKiBleGNlcHRpb24gd2lsbCBiZSB0aHJvd24uIFRoaXMgaXMgdXNlZnVsIGR1cmluZyBkZXZlbG9wbWVudCBtb2RlIHRvXG4gKiBlbnN1cmUgdGhhdCBub25lIG9mIHRoZSByZWR1Y2VycyBhY2NpZGVudGFsbHkgbXV0YXRlcyB0aGUgc3RhdGUuXG4gKi9cbmltcG9ydCB7IHN0b3JlRnJlZXplIH0gZnJvbSAnbmdyeC1zdG9yZS1mcmVlemUnO1xuXG4vKipcbiAqIGNvbWJpbmVSZWR1Y2VycyBpcyBhbm90aGVyIHVzZWZ1bCBtZXRhcmVkdWNlciB0aGF0IHRha2VzIGEgbWFwIG9mIHJlZHVjZXJcbiAqIGZ1bmN0aW9ucyBhbmQgY3JlYXRlcyBhIG5ldyByZWR1Y2VyIHRoYXQgc3RvcmVzIHRoZSBnYXRoZXJzIHRoZSB2YWx1ZXNcbiAqIG9mIGVhY2ggcmVkdWNlciBhbmQgc3RvcmVzIHRoZW0gdXNpbmcgdGhlIHJlZHVjZXIncyBrZXkuIFRoaW5rIG9mIGl0XG4gKiBhbG1vc3QgbGlrZSBhIGRhdGFiYXNlLCB3aGVyZSBldmVyeSByZWR1Y2VyIGlzIGEgdGFibGUgaW4gdGhlIGRiLlxuICpcbiAqIE1vcmU6IGh0dHBzOi8vZWdnaGVhZC5pby9sZXNzb25zL2phdmFzY3JpcHQtcmVkdXgtaW1wbGVtZW50aW5nLWNvbWJpbmVyZWR1Y2Vycy1mcm9tLXNjcmF0Y2hcbiAqL1xuaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuXG4vKipcbiAqIEV2ZXJ5IHJlZHVjZXIgbW9kdWxlJ3MgZGVmYXVsdCBleHBvcnQgaXMgdGhlIHJlZHVjZXIgZnVuY3Rpb24gaXRzZWxmLiBJblxuICogYWRkaXRpb24sIGVhY2ggbW9kdWxlIHNob3VsZCBleHBvcnQgYSB0eXBlIG9yIGludGVyZmFjZSB0aGF0IGRlc2NyaWJlc1xuICogdGhlIHN0YXRlIG9mIHRoZSByZWR1Y2VyIHBsdXMgYW55IHNlbGVjdG9yIGZ1bmN0aW9ucy4gVGhlIGAqIGFzYFxuICogbm90YXRpb24gcGFja2FnZXMgdXAgYWxsIG9mIHRoZSBleHBvcnRzIGludG8gYSBzaW5nbGUgb2JqZWN0LlxuICovXG5pbXBvcnQgKiBhcyBmcm9tTXVsdGlsaW5ndWFsIGZyb20gJy4uLy4uL2kxOG4vaW5kZXgnO1xuaW1wb3J0IHsgSU11bHRpbGluZ3VhbFN0YXRlIH0gZnJvbSAnLi4vLi4vaTE4bi9pbmRleCc7XG5pbXBvcnQgKiBhcyBmcm9tU2FtcGxlIGZyb20gJy4uLy4uL2NvcGEtd2NpL2luZGV4JztcbmltcG9ydCB7IElTYW1wbGVTdGF0ZSB9IGZyb20gJy4uLy4uL2NvcGEtd2NpL2luZGV4JztcblxuLyoqXG4gKiBBcyBtZW50aW9uZWQsIHdlIHRyZWF0IGVhY2ggcmVkdWNlciBsaWtlIGEgdGFibGUgaW4gYSBkYXRhYmFzZS4gVGhpcyBtZWFuc1xuICogb3VyIHRvcCBsZXZlbCBzdGF0ZSBpbnRlcmZhY2UgaXMganVzdCBhIG1hcCBvZiBrZXlzIHRvIGlubmVyIHN0YXRlIHR5cGVzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElBcHBTdGF0ZSB7XG4gIGkxOG46IGZyb21NdWx0aWxpbmd1YWwuSU11bHRpbGluZ3VhbFN0YXRlO1xuICBzYW1wbGU6IGZyb21TYW1wbGUuSVNhbXBsZVN0YXRlO1xufTtcblxuLyoqXG4gKiBCZWNhdXNlIG1ldGFyZWR1Y2VycyB0YWtlIGEgcmVkdWNlciBmdW5jdGlvbiBhbmQgcmV0dXJuIGEgbmV3IHJlZHVjZXIsXG4gKiB3ZSBjYW4gdXNlIG91ciBjb21wb3NlIGhlbHBlciB0byBjaGFpbiB0aGVtIHRvZ2V0aGVyLiBIZXJlIHdlIGFyZVxuICogdXNpbmcgY29tYmluZVJlZHVjZXJzIHRvIG1ha2Ugb3VyIHRvcCBsZXZlbCByZWR1Y2VyLCBhbmQgdGhlblxuICogd3JhcHBpbmcgdGhhdCBpbiBzdG9yZUxvZ2dlci4gUmVtZW1iZXIgdGhhdCBjb21wb3NlIGFwcGxpZXNcbiAqIHRoZSByZXN1bHQgZnJvbSByaWdodCB0byBsZWZ0LlxuICovXG5jb25zdCByZWR1Y2VycyA9IHtcbiAgaTE4bjogZnJvbU11bHRpbGluZ3VhbC5yZWR1Y2VyLFxuICBzYW1wbGU6IGZyb21TYW1wbGUucmVkdWNlclxufTtcblxuY29uc3QgZGV2ZWxvcG1lbnRSZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPElBcHBTdGF0ZT4gPSBjb21wb3NlKHN0b3JlRnJlZXplLCBjb21iaW5lUmVkdWNlcnMpKHJlZHVjZXJzKTtcbmNvbnN0IHByb2R1Y3Rpb25SZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPElBcHBTdGF0ZT4gPSBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpO1xuXG5leHBvcnQgZnVuY3Rpb24gQXBwUmVkdWNlcihzdGF0ZTogYW55LCBhY3Rpb246IGFueSkge1xuICBpZiAoU3RyaW5nKCc8JT0gQlVJTERfVFlQRSAlPicpID09PSAnZGV2Jykge1xuICAgIHJldHVybiBkZXZlbG9wbWVudFJlZHVjZXIoc3RhdGUsIGFjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByb2R1Y3Rpb25SZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNdWx0aWxpbmd1YWxTdGF0ZShzdGF0ZSQ6IE9ic2VydmFibGU8SUFwcFN0YXRlPik6IE9ic2VydmFibGU8SU11bHRpbGluZ3VhbFN0YXRlPiB7XG4gIHJldHVybiBzdGF0ZSQuc2VsZWN0KHMgPT4gcy5pMThuKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lTGlzdFN0YXRlKHN0YXRlJDogT2JzZXJ2YWJsZTxJQXBwU3RhdGU+KTogT2JzZXJ2YWJsZTxJU2FtcGxlU3RhdGU+IHtcbiAgcmV0dXJuIHN0YXRlJC5zZWxlY3QocyA9PiBzLnNhbXBsZSk7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRMYW5nOiBhbnkgPSBjb21wb3NlKGZyb21NdWx0aWxpbmd1YWwuZ2V0TGFuZywgZ2V0TXVsdGlsaW5ndWFsU3RhdGUpO1xuZXhwb3J0IGNvbnN0IGdldE5hbWVzOiBhbnkgPSBjb21wb3NlKGZyb21TYW1wbGUuZ2V0TmFtZXMsIGdldE5hbWVMaXN0U3RhdGUpO1xuIl19
